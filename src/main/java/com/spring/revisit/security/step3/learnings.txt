Multiple Beans of SecurityFilterChain:
1) If you have multiple SecurityFilterChain beans, Spring Security requires that they are defined in a way that avoids
ambiguity. This usually means each chain should have specific request patterns (using ant matchers) so that Spring can
determine which chain to use for each incoming request.
2) When you create multiple SecurityFilterChain beans, they should be designed to match different request patterns.
For example:
@Bean
public SecurityFilterChain adminSecurityFilterChain(HttpSecurity http) throws Exception {
    http
        .requestMatchers("/admin/**")
        .authorizeRequests(auth -> auth.anyRequest().hasRole("ADMIN"))
        .and()
        .formLogin();
    return http.build();
}

@Bean
public SecurityFilterChain userSecurityFilterChain(HttpSecurity http) throws Exception {
    http
        .requestMatchers("/user/**")
        .authorizeRequests(auth -> auth.anyRequest().hasRole("USER"))
        .and()
        .formLogin();
    return http.build();
}
In this example, one filter chain is specific to /admin/** requests and another to /user/**, allowing Spring to apply
the appropriate filter chain based on the request.

Understanding @EnableWebSecurity and Order
Multiple Security Configurations: When you have multiple security configuration classes, each marked with
@EnableWebSecurity, they can coexist. The @Order annotation determines the order in which these configurations are
applied. Lower values take precedence.

Default Filter Chain: The default filter chain provided by Spring Security is only applied when there are no custom
SecurityFilterChain beans defined that match the incoming requests.
For class annotated with EnableSecurityConfig annotation, internally WebSecurityConfiguration will be imported as well.
There is a method(springSecurityFilterChain) that will create the Default SpringSecurityFilterChain bean . There we are
checking if filter already exist. If There is a custom springSecurityFilterChain bean already defined then that bean
will be executed and not the default one.

Custom SpringSecurityFilterChain
1) By Default when we are just return httpSecurity.build(), these are the filters that are activated
Security will not be activated as we haven't configured any details.
Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  CsrfFilter
  LogoutFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
]

2)  httpSecurity.authorizeHttpRequests().anyRequest().authenticated()

By Configuring this, one additional filter named as "AuthorizationFilter" is also activated.
Now security is enabled.

Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  CsrfFilter
  LogoutFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]

3) Using:
httpSecurity.authorizeHttpRequests().anyRequest().authenticated().and().formLogin().and().build();

UsernamePasswordAuthenticationFilter, DefaultLoginPageGeneratingFilter, DefaultLogoutPageGeneratingFilter also activated
Security filter chain: [
     DisableEncodeUrlFilter
     WebAsyncManagerIntegrationFilter
     SecurityContextHolderFilter
     HeaderWriterFilter
     CsrfFilter
     LogoutFilter
     UsernamePasswordAuthenticationFilter
     DefaultLoginPageGeneratingFilter
     DefaultLogoutPageGeneratingFilter
     RequestCacheAwareFilter
     SecurityContextHolderAwareRequestFilter
     AnonymousAuthenticationFilter
     ExceptionTranslationFilter
     AuthorizationFilter
   ]

4) For web-based requests we can have the login page generated by DefaultLoginPageGeneratingFilter but for REST Requests
httpSecurity.authorizeHttpRequests().anyRequest().authenticated().and().formLogin().and().httpBasic().and().build();

BasicAuthenticationFilter is also activated now.

Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextHolderFilter
  HeaderWriterFilter
  CsrfFilter
  LogoutFilter
  UsernamePasswordAuthenticationFilter
  DefaultLoginPageGeneratingFilter
  DefaultLogoutPageGeneratingFilter
  BasicAuthenticationFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  AnonymousAuthenticationFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]

